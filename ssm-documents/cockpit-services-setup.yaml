schemaVersion: "2.2"
description: "Extended Services Setup for Cockpit (Virtualization, Containers, Monitoring)"
parameters:
  InstanceId:
    type: String
    description: The instance ID to configure
  NotificationTopic:
    type: String
    description: SNS topic ARN for notifications
    default: ""
mainSteps:
  - action: "aws:runShellScript"
    name: "ExtendedServicesSetup"
    inputs:
      timeoutSeconds: "1800"
      runCommand:
        - |
          #!/bin/bash
          set -e
          
          # Setup logging
          exec > >(tee -a /var/log/cockpit-services-setup.log)
          exec 2>&1
          echo "Starting extended services setup at $(date)"
          
          # Get instance metadata for notifications
          INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
          REGION=$(curl -s http://169.254.169.254/latest/meta-data/placement/region)
          SNS_TOPIC_ARN="{{NotificationTopic}}"
          
          # Notification function
          send_notification() {
            local status="$1"
            local message="$2"
            
            if [[ -n "$SNS_TOPIC_ARN" ]]; then
              aws sns publish \
                --region "$REGION" \
                --topic-arn "$SNS_TOPIC_ARN" \
                --subject "Cockpit Services Setup $status - $INSTANCE_ID" \
                --message "$message" >/dev/null 2>&1 || echo "Failed to send SNS notification"
            fi
          }
          
          # Send start notification
          send_notification "STARTED" "Extended services setup started on instance $INSTANCE_ID"
          
          # Retry function for DNF operations
          retry_dnf() {
            local max_attempts=3
            local attempt=1
            local sleep_time=120
            
            while [ $attempt -le $max_attempts ]; do
              echo "DNF attempt $attempt/$max_attempts: $*"
              
              if dnf clean all >/dev/null 2>&1 && dnf makecache >/dev/null 2>&1 && dnf "$@"; then
                echo "DNF operation succeeded on attempt $attempt"
                return 0
              fi
              
              if [ $attempt -lt $max_attempts ]; then
                echo "DNF attempt $attempt failed, retrying in $sleep_time seconds..."
                sleep $sleep_time
              else
                echo "DNF operation failed after $max_attempts attempts"
                return 1
              fi
              ((attempt++))
            done
          }
          
          # Install Cockpit machine management module
          echo "Installing Cockpit virtualization module..."
          retry_dnf install -y cockpit-machines || echo "cockpit-machines not available, skipping..."
          
          # Install virtualization dependencies
          echo "Installing virtualization packages..."
          if ! retry_dnf install -y libvirt libvirt-client virt-install virt-manager qemu-kvm; then
            echo "Warning: Some virtualization packages failed to install"
          fi
          
          # Install Cockpit container management module
          echo "Installing Cockpit container module..."
          retry_dnf install -y cockpit-podman || echo "cockpit-podman not available, skipping..."
          
          # Install Podman
          echo "Installing Podman..."
          if ! retry_dnf install -y podman; then
            echo "Warning: Podman installation failed"
          fi
          
          # Install performance monitoring
          echo "Installing performance monitoring tools..."
          retry_dnf install -y cockpit-pcp || echo "cockpit-pcp not available, skipping..."
          if ! retry_dnf install -y pcp pcp-system-tools; then
            echo "Warning: PCP tools installation failed"
          fi
          
          # Enable and start libvirtd
          echo "Configuring virtualization services..."
          if systemctl enable --now libvirtd; then
            echo "Libvirtd service enabled and started"
          else
            echo "Warning: Failed to start libvirtd service"
          fi
          
          # Enable and start Podman socket
          echo "Configuring container services..."
          if systemctl enable --now podman.socket; then
            echo "Podman socket enabled and started"
          else
            echo "Warning: Failed to start podman socket"
          fi
          
          # Enable PCP services for performance monitoring
          echo "Configuring performance monitoring..."
          if systemctl enable --now pmcd && systemctl enable --now pmlogger; then
            echo "Performance monitoring services enabled and started"
          else
            echo "Warning: Failed to start performance monitoring services"
          fi
          
          # Create libvirt group and add users if needed
          echo "Configuring user permissions..."
          groupadd -f libvirt
          
          # Add existing users to required groups
          for user in rocky admin ec2-user; do
            if id "$user" &>/dev/null; then
              usermod -aG libvirt "$user" || echo "Warning: Failed to add $user to libvirt group"
              echo "Added $user to libvirt group"
            fi
          done
          
          # Verify service status
          echo "Verifying service status..."
          services_status=""
          
          for service in cockpit.socket libvirtd podman.socket pmcd pmlogger; do
            if systemctl is-active --quiet "$service"; then
              services_status="$services_status\n✅ $service: active"
            else
              services_status="$services_status\n❌ $service: inactive"
            fi
          done
          
          echo -e "Service Status:$services_status"
          
          send_notification "SUCCESS" "Extended services setup completed on instance $INSTANCE_ID.$services_status"
          echo "Extended services setup completed at $(date)"