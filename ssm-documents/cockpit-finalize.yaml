schemaVersion: "2.2"
description: "Final Cockpit Configuration and Completion Notification"
parameters:
  InstanceId:
    type: String
    description: The instance ID to configure
  NotificationTopic:
    type: String
    description: SNS topic ARN for notifications
    default: ""
mainSteps:
  - action: "aws:runShellScript"
    name: "FinalConfiguration"
    inputs:
      timeoutSeconds: "600"
      runCommand:
        - |
          #!/bin/bash
          set -e
          
          # Setup logging
          exec > >(tee -a /var/log/cockpit-finalize.log)
          exec 2>&1
          echo "Starting final Cockpit configuration at $(date)"
          
          # Get instance metadata
          INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
          REGION=$(curl -s http://169.254.169.254/latest/meta-data/placement/region)
          PUBLIC_IP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4 || echo "IP_NOT_AVAILABLE")
          PRIVATE_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4 || echo "unknown")
          AZ=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone || echo "unknown")
          INSTANCE_TYPE=$(curl -s http://169.254.169.254/latest/meta-data/instance-type || echo "unknown")
          # Get SNS topic from SSM Parameter Store
          SNS_TOPIC_ARN=$(aws ssm get-parameter --name "/cockpit-deployment/sns-topic-arn" --region "$REGION" --query 'Parameter.Value' --output text 2>/dev/null || echo "")
          
          # Notification function
          send_notification() {
            local status="$1"
            local message="$2"
            
            if [[ -n "$SNS_TOPIC_ARN" ]]; then
              aws sns publish \
                --region "$REGION" \
                --topic-arn "$SNS_TOPIC_ARN" \
                --subject "Cockpit Installation $status - $INSTANCE_ID" \
                --message "$message" >/dev/null 2>&1 || echo "Failed to send SNS notification"
            fi
          }
          
          # Send start notification
          send_notification "FINALIZING" "Final configuration started on instance $INSTANCE_ID"
          
          # Configure Cockpit settings
          echo "Configuring Cockpit settings..."
          mkdir -p /etc/cockpit
          cat > /etc/cockpit/cockpit.conf << 'EOF'
          [WebService]
          AllowUnencrypted=false
          LoginTitle=AWS Outpost Cockpit Interface
          
          [Session]
          IdleTimeout=15
          EOF
          echo "Cockpit configuration file created"
          
          # Create welcome message file
          cat > /etc/motd.d/cockpit-info << EOF
          =========================================
          üöÄ Cockpit is installed and running!
          Access: https://${PUBLIC_IP}:9090
          
          Login Credentials:
          - Username: admin | Password: Cockpit123
          - Username: rocky | Password: Cockpit123
          =========================================
          EOF
          echo "Welcome message created"
          
          # Final service verification
          echo "Performing final service verification..."
          
          services_status=""
          critical_services=("cockpit.socket")
          optional_services=("libvirtd" "podman.socket" "pmcd" "pmlogger" "amazon-ssm-agent")
          
          all_critical_ok=true
          
          # Check critical services
          for service in "${critical_services[@]}"; do
            if systemctl is-active --quiet "$service"; then
              services_status="$services_status\n‚úÖ $service: active (critical)"
            else
              services_status="$services_status\n‚ùå $service: inactive (CRITICAL)"
              all_critical_ok=false
            fi
          done
          
          # Check optional services
          for service in "${optional_services[@]}"; do
            if systemctl is-active --quiet "$service"; then
              services_status="$services_status\n‚úÖ $service: active"
            else
              services_status="$services_status\n‚ö†Ô∏è $service: inactive"
            fi
          done
          
          # Test Cockpit web interface connectivity
          echo "Testing Cockpit web interface..."
          web_status="‚ùå Not responding"
          if curl -k -s --connect-timeout 5 --max-time 10 https://localhost:9090/ >/dev/null; then
            web_status="‚úÖ Responding"
          fi
          
          # Check installed modules
          echo "Checking installed Cockpit modules..."
          modules_status=""
          
          module_dirs="/usr/share/cockpit"
          if [[ -d "$module_dirs" ]]; then
            for module in system machines podman storaged packagekit networkmanager pcp sosreport file-sharing navigator sensors; do
              if [[ -d "$module_dirs/$module" ]]; then
                modules_status="$modules_status\n‚úÖ cockpit-$module: installed"
              fi
            done
          fi
          
          # Check for hardware sensors on bare metal
          sensors_info=""
          if [[ "$INSTANCE_TYPE" == *".metal"* ]]; then
            if command -v sensors >/dev/null 2>&1; then
              sensor_count=$(sensors 2>/dev/null | grep -c "¬∞C" || echo "0")
              sensors_info="\nüå°Ô∏è Hardware sensors detected: $sensor_count temperature sensors"
            fi
          fi
          
          # Display comprehensive installation summary
          echo ""
          echo "==========================================="
          echo "üéâ Cockpit Installation Complete!"
          echo "==========================================="
          echo "Instance ID:    $INSTANCE_ID"
          echo "Instance Type:  $INSTANCE_TYPE"
          echo "Public IP:      $PUBLIC_IP"
          echo "Private IP:     $PRIVATE_IP"
          echo "Region/AZ:      $REGION/$AZ"
          echo "Cockpit URL:    https://${PUBLIC_IP}:9090"
          echo "Web Interface:  $web_status"
          echo ""
          echo "Login Credentials:"
          echo "  ‚Ä¢ Username: admin | Password: Cockpit123"
          echo "  ‚Ä¢ Username: rocky | Password: Cockpit123"
          echo ""
          echo -e "Service Status:$services_status"
          
          if [[ -n "$modules_status" ]]; then
            echo -e "\nInstalled Modules:$modules_status"
          fi
          
          if [[ -n "$sensors_info" ]]; then
            echo -e "$sensors_info"
          fi
          
          echo ""
          echo "SSH Access: ssh -i your-key.pem rocky@$PUBLIC_IP"
          echo "==========================================="
          
          # Prepare final notification
          final_message="
          === COCKPIT INSTALLATION COMPLETE ===
          
          Instance Details:
          - Instance ID: $INSTANCE_ID
          - Instance Type: $INSTANCE_TYPE
          - Public IP: $PUBLIC_IP
          - Private IP: $PRIVATE_IP
          - Availability Zone: $AZ
          - Completion Time: $(date)
          
          Access Information:
          - Cockpit Web UI: https://$PUBLIC_IP:9090
          - Web Interface Status: $web_status
          - SSH Access: ssh -i your-key.pem rocky@$PUBLIC_IP
          - SSM Session Manager: Available via AWS Console
          
          Login Credentials:
          - Username: admin | Password: Cockpit123
          - Username: rocky | Password: Cockpit123
          
          Service Status:$services_status
          
          Installed Modules:$modules_status$sensors_info
          
          === INSTALLATION SUMMARY ===
          ‚úÖ System preparation completed
          ‚úÖ Core Cockpit installation completed
          ‚úÖ Extended services configured
          ‚úÖ Third-party extensions installed
          ‚úÖ User configuration completed
          ‚úÖ Final configuration applied
          
          Your Cockpit server is ready for use!
          "
          
          # Send final notification based on critical service status
          if [[ "$all_critical_ok" == true ]]; then
            send_notification "SUCCESS" "$final_message"
            echo "‚úÖ All critical services are running. Installation completed successfully!"
          else
            send_notification "PARTIAL" "$final_message\n\nWARNING: Some critical services are not running. Please check the logs."
            echo "‚ö†Ô∏è Installation completed but some critical services are not running."
          fi
          
          echo "Final configuration completed at $(date)"