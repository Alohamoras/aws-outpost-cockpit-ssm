schemaVersion: "0.3"
description: "Main Cockpit Deployment Automation - Orchestrates all components"
assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  InstanceId:
    type: String
    description: The instance ID to configure with Cockpit
  NotificationTopic:
    type: String
    description: SNS topic ARN for notifications
    default: ""
  AutomationAssumeRole:
    type: String
    description: The IAM role ARN for automation execution
    default: ""
  ContinueOnError:
    type: Boolean
    description: Continue deployment even if non-critical steps fail
    default: true
mainSteps:
  - name: "ValidateInstance"
    action: "aws:executeAwsApi"
    inputs:
      Service: ec2
      Api: DescribeInstances
      InstanceIds:
        - "{{ InstanceId }}"
    outputs:
      - Name: "InstanceState"
        Selector: "$.Reservations[0].Instances[0].State.Name"
        Type: "String"
      - Name: "InstanceType"
        Selector: "$.Reservations[0].Instances[0].InstanceType"
        Type: "String"
      - Name: "PublicIpAddress"
        Selector: "$.Reservations[0].Instances[0].PublicIpAddress"
        Type: "String"
    isEnd: false
    
  - name: "CheckInstanceRunning"
    action: "aws:branch"
    inputs:
      Choices:
        - NextStep: "NotifyStart"
          Variable: "{{ ValidateInstance.InstanceState }}"
          StringEquals: "running"
      Default: "InstanceNotRunning"
    isEnd: false
    
  - name: "InstanceNotRunning"
    action: "aws:executeAwsApi"
    inputs:
      Service: sns
      Api: Publish
      TopicArn: "{{ NotificationTopic }}"
      Subject: "Cockpit Deployment FAILED - Instance Not Running"
      Message: |
        Cockpit deployment cannot proceed. Instance {{ InstanceId }} is not in running state.
        Current state: {{ ValidateInstance.InstanceState }}
        
        Please ensure the instance is running before retrying deployment.
    isEnd: true
    
  - name: "NotifyStart"
    action: "aws:executeAwsApi"
    inputs:
      Service: sns
      Api: Publish
      TopicArn: "{{ NotificationTopic }}"
      Subject: "Cockpit Deployment STARTED - {{ InstanceId }}"
      Message: |
        üöÄ COCKPIT DEPLOYMENT STARTED
        
        Instance Details:
        - Instance ID: {{ InstanceId }}
        - Instance Type: {{ ValidateInstance.InstanceType }}
        - Public IP: {{ ValidateInstance.PublicIpAddress }}
        - Start Time: {{ global:DATE_TIME }}
        
        Deployment will proceed through the following components:
        1. System Preparation
        2. Core Cockpit Installation
        3. Extended Services Setup  
        4. Third-party Extensions
        5. User Configuration
        6. Final Configuration
        
        You will receive notifications for each component completion.
    isEnd: false
    isCritical: false
    
  - name: "SystemPreparation"
    action: "aws:runCommand"
    inputs:
      DocumentName: "cockpit-system-prep"
      InstanceIds:
        - "{{ InstanceId }}"
      Parameters:
        InstanceId: "{{ InstanceId }}"
        NotificationTopic: "{{ NotificationTopic }}"
    isEnd: false
    isCritical: true
    onFailure: "step:HandleSystemPrepFailure"
    nextStep: "CoreCockpitInstall"
    
  - name: "HandleSystemPrepFailure"
    action: "aws:executeAwsApi"
    inputs:
      Service: sns
      Api: Publish
      TopicArn: "{{ NotificationTopic }}"
      Subject: "Cockpit Deployment FAILED - System Preparation"
      Message: |
        ‚ùå COCKPIT DEPLOYMENT FAILED
        
        System preparation failed on instance {{ InstanceId }}.
        This is a critical failure and deployment cannot continue.
        
        Please check the SSM execution logs and instance system logs:
        - SSM Execution: {{ automation:EXECUTION_ID }}
        - Instance Logs: /var/log/cockpit-system-prep.log
        
        Common causes:
        - Network connectivity issues
        - Repository access problems  
        - Insufficient instance resources
        
        Retry deployment after resolving the issue.
    isEnd: true
    
  - name: "CoreCockpitInstall"
    action: "aws:runCommand"
    inputs:
      DocumentName: "cockpit-core-install"
      InstanceIds:
        - "{{ InstanceId }}"
      Parameters:
        InstanceId: "{{ InstanceId }}"
        NotificationTopic: "{{ NotificationTopic }}"
    isEnd: false
    isCritical: true
    onFailure: "step:HandleCoreInstallFailure"
    nextStep: "ExtendedServicesSetup"
    
  - name: "HandleCoreInstallFailure"
    action: "aws:executeAwsApi"
    inputs:
      Service: sns
      Api: Publish
      TopicArn: "{{ NotificationTopic }}"
      Subject: "Cockpit Deployment FAILED - Core Installation"
      Message: |
        ‚ùå COCKPIT DEPLOYMENT FAILED
        
        Core Cockpit installation failed on instance {{ InstanceId }}.
        This is a critical failure and deployment cannot continue.
        
        Please check the SSM execution logs and instance system logs:
        - SSM Execution: {{ automation:EXECUTION_ID }}
        - Instance Logs: /var/log/cockpit-core-install.log
        
        The system preparation completed successfully, so the issue is likely:
        - Cockpit package availability
        - Package dependency conflicts
        - Service startup issues
        
        You can retry just the core installation component.
    isEnd: true
    
  - name: "ExtendedServicesSetup"
    action: "aws:runCommand"
    inputs:
      DocumentName: "cockpit-services-setup"
      InstanceIds:
        - "{{ InstanceId }}"
      Parameters:
        InstanceId: "{{ InstanceId }}"
        NotificationTopic: "{{ NotificationTopic }}"
    isEnd: false
    isCritical: false
    onFailure: "step:HandleServicesFailure"
    nextStep: "ThirdPartyExtensions"
    
  - name: "HandleServicesFailure"
    action: "aws:branch"
    inputs:
      Choices:
        - NextStep: "ThirdPartyExtensions"
          Variable: "{{ ContinueOnError }}"
          BooleanEquals: true
      Default: "ServicesFailureStop"
    isEnd: false
    
  - name: "ServicesFailureStop"
    action: "aws:executeAwsApi"
    inputs:
      Service: sns
      Api: Publish
      TopicArn: "{{ NotificationTopic }}"
      Subject: "Cockpit Deployment FAILED - Extended Services"
      Message: |
        ‚ùå COCKPIT DEPLOYMENT FAILED
        
        Extended services setup failed on instance {{ InstanceId }}.
        ContinueOnError is disabled, so deployment is stopping.
        
        Core Cockpit is installed and should be functional, but additional services
        (virtualization, containers, monitoring) may not be available.
        
        Check logs: /var/log/cockpit-services-setup.log
        
        You can retry individual components or enable ContinueOnError.
    isEnd: true
    
  - name: "ThirdPartyExtensions"
    action: "aws:runCommand"
    inputs:
      DocumentName: "cockpit-extensions"
      InstanceIds:
        - "{{ InstanceId }}"
      Parameters:
        InstanceId: "{{ InstanceId }}"
        NotificationTopic: "{{ NotificationTopic }}"
    isEnd: false
    isCritical: false
    onFailure: "step:HandleExtensionsFailure"
    nextStep: "UserConfiguration"
    
  - name: "HandleExtensionsFailure"
    action: "aws:branch"
    inputs:
      Choices:
        - NextStep: "UserConfiguration"
          Variable: "{{ ContinueOnError }}"
          BooleanEquals: true
      Default: "ExtensionsFailureStop"
    isEnd: false
    
  - name: "ExtensionsFailureStop"
    action: "aws:executeAwsApi"
    inputs:
      Service: sns
      Api: Publish
      TopicArn: "{{ NotificationTopic }}"
      Subject: "Cockpit Deployment FAILED - Extensions"
      Message: |
        ‚ùå COCKPIT DEPLOYMENT FAILED
        
        Third-party extensions installation failed on instance {{ InstanceId }}.
        ContinueOnError is disabled, so deployment is stopping.
        
        Core Cockpit and extended services should be functional, but additional
        modules (file manager, sensors) may not be available.
        
        Check logs: /var/log/cockpit-extensions.log
        
        You can retry individual components or enable ContinueOnError.
    isEnd: true
    
  - name: "UserConfiguration"
    action: "aws:runCommand"
    inputs:
      DocumentName: "cockpit-user-config"
      InstanceIds:
        - "{{ InstanceId }}"
      Parameters:
        InstanceId: "{{ InstanceId }}"
        NotificationTopic: "{{ NotificationTopic }}"
    isEnd: false
    isCritical: false
    onFailure: "step:HandleUserConfigFailure"
    nextStep: "FinalConfiguration"
    
  - name: "HandleUserConfigFailure"
    action: "aws:branch"
    inputs:
      Choices:
        - NextStep: "FinalConfiguration"
          Variable: "{{ ContinueOnError }}"
          BooleanEquals: true
      Default: "UserConfigFailureStop"
    isEnd: false
    
  - name: "UserConfigFailureStop"
    action: "aws:executeAwsApi"
    inputs:
      Service: sns
      Api: Publish
      TopicArn: "{{ NotificationTopic }}"
      Subject: "Cockpit Deployment FAILED - User Configuration"
      Message: |
        ‚ùå COCKPIT DEPLOYMENT FAILED
        
        User configuration failed on instance {{ InstanceId }}.
        ContinueOnError is disabled, so deployment is stopping.
        
        Cockpit is installed but user access may not be properly configured.
        You may need to manually create users or set passwords.
        
        Check logs: /var/log/cockpit-user-config.log
        
        You can retry individual components or enable ContinueOnError.
    isEnd: true
    
  - name: "FinalConfiguration"
    action: "aws:runCommand"
    inputs:
      DocumentName: "cockpit-finalize"
      InstanceIds:
        - "{{ InstanceId }}"
      Parameters:
        InstanceId: "{{ InstanceId }}"
        NotificationTopic: "{{ NotificationTopic }}"
    isEnd: true
    isCritical: false
    onFailure: "step:HandleFinalFailure"
    
  - name: "HandleFinalFailure"
    action: "aws:executeAwsApi"
    inputs:
      Service: sns
      Api: Publish
      TopicArn: "{{ NotificationTopic }}"
      Subject: "Cockpit Deployment COMPLETED with Warnings"
      Message: |
        ‚ö†Ô∏è COCKPIT DEPLOYMENT COMPLETED WITH WARNINGS
        
        Final configuration had issues on instance {{ InstanceId }}, but deployment completed.
        
        Cockpit should be functional at: https://{{ ValidateInstance.PublicIpAddress }}:9090
        
        Check logs: /var/log/cockpit-finalize.log
        
        Manual verification recommended:
        - Test Cockpit web interface access
        - Verify user login functionality
        - Check service status
    isEnd: true