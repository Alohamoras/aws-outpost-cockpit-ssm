schemaVersion: "2.2"
description: "Third-party Cockpit Extensions and Hardware-specific Configuration"
parameters:
  InstanceId:
    type: String
    description: The instance ID to configure
  NotificationTopic:
    type: String
    description: SNS topic ARN for notifications
    default: ""
mainSteps:
  - action: "aws:runShellScript"
    name: "ThirdPartyExtensions"
    inputs:
      timeoutSeconds: "900"
      runCommand:
        - |
          #!/bin/bash
          set -e
          
          # Setup logging
          exec > >(tee -a /var/log/cockpit-extensions.log)
          exec 2>&1
          echo "Starting third-party extensions installation at $(date)"
          
          # Get instance metadata for notifications
          INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
          REGION=$(curl -s http://169.254.169.254/latest/meta-data/placement/region)
          SNS_TOPIC_ARN="{{NotificationTopic}}"
          
          # Notification function
          send_notification() {
            local status="$1"
            local message="$2"
            
            if [[ -n "$SNS_TOPIC_ARN" ]]; then
              aws sns publish \
                --region "$REGION" \
                --topic-arn "$SNS_TOPIC_ARN" \
                --subject "Cockpit Extensions $status - $INSTANCE_ID" \
                --message "$message" >/dev/null 2>&1 || echo "Failed to send SNS notification"
            fi
          }
          
          # Send start notification
          send_notification "STARTED" "Third-party extensions installation started on instance $INSTANCE_ID"
          
          # Get instance type for hardware-specific configurations
          INSTANCE_TYPE=$(curl -s http://169.254.169.254/latest/meta-data/instance-type || echo "unknown")
          echo "Instance type detected: $INSTANCE_TYPE"
          
          installed_extensions=""
          failed_extensions=""
          
          # Install file sharing module from 45Drives
          echo "Installing cockpit-file-sharing..."
          if ! rpm -q cockpit-file-sharing &>/dev/null; then
            if dnf install -y https://github.com/45Drives/cockpit-file-sharing/releases/download/v3.3.4/cockpit-file-sharing-3.3.4-1.el9.noarch.rpm; then
              installed_extensions="$installed_extensions\n✅ cockpit-file-sharing: installed"
            else
              failed_extensions="$failed_extensions\n❌ cockpit-file-sharing: failed"
              echo "Warning: Could not install cockpit-file-sharing"
            fi
          else
            installed_extensions="$installed_extensions\n✅ cockpit-file-sharing: already installed"
          fi
          
          # Install file navigator from 45Drives
          echo "Installing cockpit-navigator..."
          if ! rpm -q cockpit-navigator &>/dev/null; then
            if dnf install -y https://github.com/45Drives/cockpit-navigator/releases/download/v0.5.10/cockpit-navigator-0.5.10-1.el9.noarch.rpm; then
              installed_extensions="$installed_extensions\n✅ cockpit-navigator: installed"
            else
              failed_extensions="$failed_extensions\n❌ cockpit-navigator: failed"
              echo "Warning: Could not install cockpit-navigator"
            fi
          else
            installed_extensions="$installed_extensions\n✅ cockpit-navigator: already installed"
          fi
          
          # Hardware-specific configuration for bare metal instances
          if [[ "$INSTANCE_TYPE" == *".metal"* ]]; then
            echo "Bare metal instance detected ($INSTANCE_TYPE), installing sensor monitoring..."
            
            # Install hardware sensor tools
            if dnf install -y lm_sensors; then
              installed_extensions="$installed_extensions\n✅ lm_sensors: installed"
              
              # Auto-detect sensors
              echo "Detecting available hardware sensors..."
              sensors-detect --auto &>/dev/null || echo "Warning: Sensor detection failed"
              
              # Display detected sensors
              echo "Available sensors:"
              sensors 2>/dev/null || echo "No sensors detected"
            else
              failed_extensions="$failed_extensions\n❌ lm_sensors: failed"
              echo "Warning: Could not install lm_sensors"
            fi
            
            # Install cockpit-sensors from 45Drives
            echo "Installing cockpit-sensors..."
            if ! rpm -q cockpit-sensors &>/dev/null; then
              if dnf install -y https://github.com/45Drives/cockpit-sensors/releases/download/v2.0.0/cockpit-sensors-2.0.0-1.el9.noarch.rpm; then
                installed_extensions="$installed_extensions\n✅ cockpit-sensors: installed"
              else
                failed_extensions="$failed_extensions\n❌ cockpit-sensors: failed"
                echo "Warning: Could not install cockpit-sensors"
              fi
            else
              installed_extensions="$installed_extensions\n✅ cockpit-sensors: already installed"
            fi
          else
            echo "Virtual instance detected ($INSTANCE_TYPE), skipping sensor monitoring"
            installed_extensions="$installed_extensions\n✅ sensor monitoring: skipped (virtual instance)"
          fi
          
          # Restart cockpit to recognize new extensions
          echo "Restarting Cockpit to recognize new extensions..."
          systemctl restart cockpit || echo "Warning: Failed to restart cockpit"
          
          # Wait a moment for restart
          sleep 5
          
          # Verify extensions are loaded
          echo "Verifying Cockpit extensions..."
          if systemctl is-active --quiet cockpit.socket; then
            echo "Cockpit is running and ready for extensions"
          else
            echo "Warning: Cockpit socket is not active after restart"
          fi
          
          # Prepare summary message
          summary_message="Third-party extensions installation completed on instance $INSTANCE_ID (Type: $INSTANCE_TYPE)."
          
          if [[ -n "$installed_extensions" ]]; then
            summary_message="$summary_message\n\nInstalled Extensions:$installed_extensions"
          fi
          
          if [[ -n "$failed_extensions" ]]; then
            summary_message="$summary_message\n\nFailed Extensions:$failed_extensions"
          fi
          
          echo -e "\nExtension Installation Summary:"
          echo -e "$summary_message"
          
          # Send final notification
          if [[ -n "$failed_extensions" ]]; then
            send_notification "PARTIAL" "$summary_message"
          else
            send_notification "SUCCESS" "$summary_message"
          fi
          
          echo "Third-party extensions installation completed at $(date)"