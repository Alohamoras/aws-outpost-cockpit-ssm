{
  "schemaVersion": "2.2",
  "description": "AWS Outpost core Cockpit installation",
  "parameters": {
    "snsTopicArn": {
      "type": "String",
      "description": "SNS Topic ARN for notifications"
    },
    "instanceId": {
      "type": "String",
      "description": "Instance ID for notifications",
      "default": "{{INSTANCE_ID}}"
    }
  },
  "mainSteps": [
    {
      "action": "aws:runShellScript",
      "name": "CoreCockpitInstallation",
      "inputs": {
        "timeoutSeconds": "1800",
        "runCommand": [
          "#!/bin/bash",
          "set -e",
          "exec > >(tee -a /var/log/ssm-cockpit-core.log)",
          "exec 2>&1",
          "",
          "echo '=== CORE COCKPIT INSTALLATION PHASE ==='",
          "echo \"Start time: $(date)\"",
          "",
          "# SNS notification function",
          "send_notification() {",
          "    local status=\"$1\"",
          "    local message=\"$2\"",
          "    if [[ -n '{{snsTopicArn}}' && '{{snsTopicArn}}' != 'None' ]]; then",
          "        aws sns publish --region $(curl -s http://169.254.169.254/latest/meta-data/placement/region) \\",
          "            --topic-arn '{{snsTopicArn}}' \\",
          "            --subject \"Cockpit Core $status - {{instanceId}}\" \\",
          "            --message \"$message\" || echo 'SNS notification failed'",
          "    fi",
          "}",
          "",
          "# DNF retry function",
          "retry_dnf() {",
          "    local max_attempts=3",
          "    local attempt=1",
          "    while [ $attempt -le $max_attempts ]; do",
          "        echo \"DNF attempt $attempt/$max_attempts: $*\"",
          "        if dnf clean all >/dev/null 2>&1 && dnf \"$@\"; then",
          "            echo \"✅ DNF operation succeeded\"",
          "            return 0",
          "        fi",
          "        if [ $attempt -lt $max_attempts ]; then",
          "            echo \"⚠️ DNF attempt $attempt failed, retrying in 30 seconds...\"",
          "            sleep 30",
          "        fi",
          "        ((attempt++))",
          "    done",
          "    echo \"❌ DNF operation failed after $max_attempts attempts\"",
          "    return 1",
          "}",
          "",
          "send_notification 'STARTED' 'Core Cockpit installation started'",
          "",
          "# Install core Cockpit packages",
          "echo 'Installing core Cockpit packages...'",
          "if retry_dnf install -y cockpit cockpit-system cockpit-ws cockpit-bridge cockpit-networkmanager cockpit-storaged cockpit-packagekit cockpit-sosreport; then",
          "    echo '✅ Core Cockpit packages installed'",
          "else",
          "    echo '❌ Core Cockpit installation failed'",
          "    send_notification 'FAILED' 'Core Cockpit installation failed'",
          "    exit 1",
          "fi",
          "",
          "# Enable and start Cockpit socket",
          "echo 'Configuring Cockpit service...'",
          "systemctl enable --now cockpit.socket",
          "systemctl enable --now NetworkManager",
          "",
          "# Configure firewall if active",
          "if systemctl is-active --quiet firewalld; then",
          "    echo 'Configuring firewall for Cockpit...'",
          "    firewall-cmd --permanent --add-service=cockpit",
          "    firewall-cmd --reload",
          "    echo '✅ Firewall configured for Cockpit'",
          "fi",
          "",
          "# Basic Cockpit configuration",
          "echo 'Creating basic Cockpit configuration...'",
          "mkdir -p /etc/cockpit",
          "cat > /etc/cockpit/cockpit.conf << 'EOF'",
          "[WebService]",
          "AllowUnencrypted = true",
          "LoginTitle = AWS Outpost Cockpit Management Console",
          "[Session]",
          "IdleTimeout = 60",
          "EOF",
          "",
          "# Test Cockpit service",
          "sleep 5",
          "if systemctl is-active --quiet cockpit.socket; then",
          "    echo '✅ Cockpit service is active'",
          "    send_notification 'SUCCESS' 'Core Cockpit installation completed successfully'",
          "else",
          "    echo '❌ Cockpit service failed to start'",
          "    send_notification 'FAILED' 'Cockpit service failed to start'",
          "    exit 1",
          "fi",
          "",
          "# Create completion marker",
          "echo \"$(date): Core Cockpit installation completed successfully\" > /tmp/phase-cockpit-core-complete",
          "echo 'Core Cockpit installation phase completed successfully'",
          "echo \"Completion time: $(date)\""
        ]
      }
    }
  ]
}