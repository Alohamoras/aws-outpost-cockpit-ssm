{
  "schemaVersion": "2.2",
  "description": "AWS Outpost Cockpit extensions (virtualization, containers, monitoring)",
  "parameters": {
    "snsTopicArn": {
      "type": "String",
      "description": "SNS Topic ARN for notifications"
    },
    "instanceId": {
      "type": "String",
      "description": "Instance ID for notifications",
      "default": "{{INSTANCE_ID}}"
    }
  },
  "mainSteps": [
    {
      "action": "aws:runShellScript",
      "name": "CockpitExtensions",
      "inputs": {
        "timeoutSeconds": "2400",
        "runCommand": [
          "#!/bin/bash",
          "set -e",
          "exec > >(tee -a /var/log/ssm-cockpit-extensions.log)",
          "exec 2>&1",
          "",
          "echo '=== COCKPIT EXTENSIONS INSTALLATION PHASE ==='",
          "echo \"Start time: $(date)\"",
          "",
          "# SNS notification function",
          "send_notification() {",
          "    local status=\"$1\"",
          "    local message=\"$2\"",
          "    if [[ -n '{{snsTopicArn}}' && '{{snsTopicArn}}' != 'None' ]]; then",
          "        aws sns publish --region $(curl -s http://169.254.169.254/latest/meta-data/placement/region) \\",
          "            --topic-arn '{{snsTopicArn}}' \\",
          "            --subject \"Cockpit Extensions $status - {{instanceId}}\" \\",
          "            --message \"$message\" || echo 'SNS notification failed'",
          "    fi",
          "}",
          "",
          "# DNF retry function",
          "retry_dnf() {",
          "    local max_attempts=3",
          "    local attempt=1",
          "    while [ $attempt -le $max_attempts ]; do",
          "        echo \"DNF attempt $attempt/$max_attempts: $*\"",
          "        if dnf clean all >/dev/null 2>&1 && dnf \"$@\"; then",
          "            echo \"✅ DNF operation succeeded\"",
          "            return 0",
          "        fi",
          "        if [ $attempt -lt $max_attempts ]; then",
          "            echo \"⚠️ DNF attempt $attempt failed, retrying in 30 seconds...\"",
          "            sleep 30",
          "        fi",
          "        ((attempt++))",
          "    done",
          "    echo \"❌ DNF operation failed after $max_attempts attempts\"",
          "    return 1",
          "}",
          "",
          "send_notification 'STARTED' 'Cockpit extensions installation started'",
          "",
          "# Install virtualization packages",
          "echo 'Installing virtualization packages...'",
          "VIRT_SUCCESS=false",
          "if retry_dnf groupinstall -y 'Virtualization Host' || retry_dnf install -y qemu-kvm libvirt virt-install virt-manager; then",
          "    echo '✅ Virtualization packages installed'",
          "    VIRT_SUCCESS=true",
          "    # Enable libvirtd service",
          "    systemctl enable --now libvirtd 2>/dev/null || echo 'libvirtd service setup skipped'",
          "else",
          "    echo '⚠️ Virtualization packages unavailable'",
          "fi",
          "",
          "# Install cockpit-machines (if virtualization is available)",
          "if [ '$VIRT_SUCCESS' = true ]; then",
          "    if retry_dnf install -y cockpit-machines; then",
          "        echo '✅ Cockpit virtualization management installed'",
          "    else",
          "        echo '⚠️ cockpit-machines unavailable'",
          "    fi",
          "fi",
          "",
          "# Install container packages",
          "echo 'Installing container packages...'",
          "if retry_dnf install -y cockpit-podman podman buildah skopeo; then",
          "    echo '✅ Container packages installed'",
          "else",
          "    echo '⚠️ Container packages unavailable'",
          "fi",
          "",
          "# Install monitoring packages",
          "echo 'Installing monitoring packages...'",
          "MONITORING_SUCCESS=false",
          "if retry_dnf install -y pcp pcp-system-tools; then",
          "    echo '✅ PCP monitoring tools installed'",
          "    MONITORING_SUCCESS=true",
          "    # Enable PCP services",
          "    systemctl enable --now pmcd pmlogger 2>/dev/null || echo 'PCP services configuration skipped'",
          "    ",
          "    # Try to install cockpit-pcp (often unavailable)",
          "    if retry_dnf install -y cockpit-pcp; then",
          "        echo '✅ Cockpit PCP integration installed'",
          "    else",
          "        echo '⚠️ cockpit-pcp unavailable, using base PCP only'",
          "    fi",
          "else",
          "    echo '⚠️ PCP monitoring tools unavailable'",
          "fi",
          "",
          "# Create status summary",
          "echo ''",
          "echo '=== EXTENSIONS INSTALLATION SUMMARY ==='",
          "if [ '$VIRT_SUCCESS' = true ]; then",
          "    echo '✅ Virtualization: Available'",
          "else",
          "    echo '⚠️ Virtualization: Unavailable'",
          "fi",
          "if [ '$MONITORING_SUCCESS' = true ]; then",
          "    echo '✅ Monitoring: Available'",
          "else",
          "    echo '⚠️ Monitoring: Unavailable'",
          "fi",
          "",
          "send_notification 'SUCCESS' 'Cockpit extensions installation completed'",
          "",
          "# Create completion marker",
          "echo \"$(date): Cockpit extensions installation completed\" > /tmp/phase-cockpit-extensions-complete",
          "echo 'Cockpit extensions installation phase completed successfully'",
          "echo \"Completion time: $(date)\""
        ]
      }
    }
  ]
}