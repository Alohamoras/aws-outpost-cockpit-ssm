{
  "schemaVersion": "2.2",
  "description": "AWS Outpost Local Network Interface (LNI) configuration",
  "parameters": {
    "instanceId": {
      "type": "String",
      "description": "Instance ID for notifications"
    },
    "enableLni": {
      "type": "String",
      "description": "Enable LNI creation",
      "default": "false"
    },
    "lniCount": {
      "type": "String",
      "description": "Number of LNIs to create",
      "default": "1"
    },
    "dhcpEnabled": {
      "type": "String",
      "description": "Use DHCP for IP assignment",
      "default": "true"
    },
    "staticIps": {
      "type": "String",
      "description": "Comma-separated static IPs",
      "default": ""
    },
    "region": {
      "type": "String",
      "description": "AWS region",
      "default": "us-east-1"
    },
    "subnetId": {
      "type": "String",
      "description": "Subnet ID for LNI creation",
      "default": ""
    }
  },
  "mainSteps": [
    {
      "action": "aws:runShellScript",
      "name": "LniConfiguration",
      "inputs": {
        "timeoutSeconds": "1200",
        "runCommand": [
          "#!/bin/bash",
          "set -e",
          "exec > >(tee -a /var/log/ssm-lni-config.log)",
          "exec 2>&1",
          "",
          "echo '=== LNI CONFIGURATION PHASE ==='",
          "echo \"Start time: $(date)\"",
          "",
          "# Parameters",
          "INSTANCE_ID='{{instanceId}}'",
          "ENABLE_LNI='{{enableLni}}'",
          "LNI_COUNT='{{lniCount}}'",
          "DHCP_ENABLED='{{dhcpEnabled}}'",
          "STATIC_IPS='{{staticIps}}'",
          "REGION='{{region}}'",
          "SUBNET_ID='{{subnetId}}'",
          "",
          "# Skip if LNI not enabled",
          "if [ \"$ENABLE_LNI\" != \"true\" ]; then",
          "    echo 'LNI disabled, skipping configuration'",
          "    exit 0",
          "fi",
          "",
          "echo \"Configuring $LNI_COUNT LNI(s) for instance $INSTANCE_ID\"",
          "",
          "echo \"Region: $REGION, Subnet: $SUBNET_ID\"",
          "",
          "# Function to create and attach LNI",
          "create_and_attach_lni() {",
          "    local device_index=$1",
          "    local static_ip=$2",
          "    ",
          "    echo \"Creating LNI for device index $device_index\"",
          "    ",
          "    # Create network interface",
          "    echo \"Creating network interface in region: $REGION, subnet: $SUBNET_ID\"",
          "    local eni_id",
          "    if [ -n \"$static_ip\" ]; then",
          "        eni_id=$(aws ec2 create-network-interface \\",
          "            --region \"$REGION\" \\",
          "            --subnet-id \"$SUBNET_ID\" \\",
          "            --private-ip-address \"$static_ip\" \\",
          "            --query 'NetworkInterface.NetworkInterfaceId' \\",
          "            --output text)",
          "    else",
          "        eni_id=$(aws ec2 create-network-interface \\",
          "            --region \"$REGION\" \\",
          "            --subnet-id \"$SUBNET_ID\" \\",
          "            --query 'NetworkInterface.NetworkInterfaceId' \\",
          "            --output text)",
          "    fi",
          "    if [ $? -ne 0 ] || [ \"$eni_id\" = \"None\" ]; then",
          "        echo \"❌ Failed to create LNI for device $device_index\"",
          "        return 1",
          "    fi",
          "    ",
          "    echo \"✅ Created LNI: $eni_id\"",
          "    ",
          "    # Wait for ENI to be available",
          "    echo \"Waiting for ENI to be available...\"",
          "    aws ec2 wait network-interface-available \\",
          "        --region \"$REGION\" \\",
          "        --network-interface-ids \"$eni_id\"",
          "    ",
          "    # Attach to instance",
          "    echo \"Attaching LNI $eni_id to instance $INSTANCE_ID at device index $device_index\"",
          "    aws ec2 attach-network-interface \\",
          "        --region \"$REGION\" \\",
          "        --network-interface-id \"$eni_id\" \\",
          "        --instance-id \"$INSTANCE_ID\" \\",
          "        --device-index $device_index",
          "    ",
          "    if [ $? -eq 0 ]; then",
          "        echo \"✅ Attached LNI $eni_id to device index $device_index\"",
          "        return 0",
          "    else",
          "        echo \"❌ Failed to attach LNI $eni_id\"",
          "        return 1",
          "    fi",
          "}",
          "",
          "# Function to configure OS networking for LNI",
          "configure_os_networking() {",
          "    local device_index=$1",
          "    local interface_name=\"eth$device_index\"",
          "    local bridge_name=\"br-lni$device_index\"",
          "    ",
          "    echo \"Configuring OS networking for $interface_name\"",
          "    ",
          "    # Wait for interface to appear",
          "    local wait_count=0",
          "    while [ $wait_count -lt 30 ] && [ ! -e \"/sys/class/net/$interface_name\" ]; do",
          "        echo \"Waiting for $interface_name to appear...\"",
          "        sleep 2",
          "        ((wait_count++))",
          "    done",
          "    ",
          "    if [ ! -e \"/sys/class/net/$interface_name\" ]; then",
          "        echo \"❌ Interface $interface_name not found\"",
          "        return 1",
          "    fi",
          "    ",
          "    # Create NetworkManager connection",
          "    if [ \"$DHCP_ENABLED\" = \"true\" ]; then",
          "        echo \"Configuring $interface_name with DHCP\"",
          "        nmcli connection add type ethernet \\",
          "            con-name \"$interface_name-lni\" \\",
          "            ifname \"$interface_name\" \\",
          "            ipv4.method auto \\",
          "            connection.autoconnect yes",
          "    else",
          "        echo \"Interface will be configured for bridge use\"",
          "        nmcli connection add type ethernet \\",
          "            con-name \"$interface_name-lni\" \\",
          "            ifname \"$interface_name\" \\",
          "            ipv4.method disabled \\",
          "            ipv6.method disabled \\",
          "            connection.autoconnect yes",
          "    fi",
          "    ",
          "    # Activate the connection",
          "    nmcli connection up \"$interface_name-lni\"",
          "    ",
          "    echo \"✅ Configured $interface_name\"",
          "}",
          "",
          "# Function to create libvirt bridge for VMs",
          "create_libvirt_bridge() {",
          "    local device_index=$1",
          "    local interface_name=\"eth$device_index\"",
          "    local bridge_name=\"br-lni$device_index\"",
          "    ",
          "    echo \"Creating libvirt bridge $bridge_name for $interface_name\"",
          "    ",
          "    # Create bridge XML configuration",
          "    cat > /tmp/${bridge_name}.xml << EOF",
          "<network>",
          "  <name>$bridge_name</name>",
          "  <forward mode='bridge'/>",
          "  <bridge name='$bridge_name'/>",
          "</network>",
          "EOF",
          "    ",
          "    # Define and start the network",
          "    virsh net-define /tmp/${bridge_name}.xml",
          "    virsh net-autostart $bridge_name",
          "    virsh net-start $bridge_name",
          "    ",
          "    # Create physical bridge and add interface",
          "    nmcli connection add type bridge \\",
          "        con-name \"$bridge_name\" \\",
          "        ifname \"$bridge_name\" \\",
          "        stp no",
          "    ",
          "    # Add the ethernet interface as bridge slave",
          "    nmcli connection modify \"$interface_name-lni\" \\",
          "        connection.master \"$bridge_name\" \\",
          "        connection.slave-type bridge",
          "    ",
          "    # Configure bridge IP (DHCP or static)",
          "    if [ \"$DHCP_ENABLED\" = \"true\" ]; then",
          "        nmcli connection modify \"$bridge_name\" \\",
          "            ipv4.method auto",
          "    fi",
          "    ",
          "    # Activate bridge",
          "    nmcli connection up \"$bridge_name\"",
          "    nmcli connection up \"$interface_name-lni\"",
          "    ",
          "    echo \"✅ Created libvirt bridge $bridge_name\"",
          "}",
          "",
          "# Function to set default libvirt network",
          "set_default_libvirt_network() {",
          "    echo \"Configuring libvirt default network to use first LNI\"",
          "    ",
          "    # Stop default network if running",
          "    virsh net-destroy default 2>/dev/null || true",
          "    virsh net-undefine default 2>/dev/null || true",
          "    ",
          "    # Create new default network using first LNI bridge",
          "    cat > /tmp/default-lni.xml << EOF",
          "<network>",
          "  <name>default</name>",
          "  <forward mode='bridge'/>",
          "  <bridge name='br-lni1'/>",
          "</network>",
          "EOF",
          "    ",
          "    virsh net-define /tmp/default-lni.xml",
          "    virsh net-autostart default",
          "    virsh net-start default",
          "    ",
          "    echo \"✅ Set br-lni1 as default libvirt network\"",
          "}",
          "",
          "# Parse static IPs if provided",
          "if [ -n \"$STATIC_IPS\" ]; then",
          "    IFS=',' read -ra IP_ARRAY <<< \"$STATIC_IPS\"",
          "else",
          "    IP_ARRAY=()",
          "fi",
          "",
          "# Main execution",
          "echo \"Starting LNI creation and configuration\"",
          "",
          "# Create and attach LNIs",
          "for ((i=1; i<=LNI_COUNT; i++)); do",
          "    device_index=$i",
          "    static_ip=\"\"",
          "    ",
          "    # Get static IP if provided",
          "    if [ ${#IP_ARRAY[@]} -ge $i ]; then",
          "        static_ip=\"${IP_ARRAY[$((i-1))]}\"",
          "    fi",
          "    ",
          "    echo \"Processing LNI $i/$LNI_COUNT (device index $device_index)\"",
          "    ",
          "    if create_and_attach_lni \"$device_index\" \"$static_ip\"; then",
          "        echo \"✅ LNI $i created and attached successfully\"",
          "    else",
          "        echo \"❌ Failed to create/attach LNI $i\"",
          "        exit 1",
          "    fi",
          "done",
          "",
          "# Wait for all interfaces to be available",
          "echo \"Waiting for interfaces to stabilize...\"",
          "sleep 10",
          "",
          "# Configure OS networking for each LNI",
          "for ((i=1; i<=LNI_COUNT; i++)); do",
          "    device_index=$i",
          "    echo \"Configuring networking for LNI $i (eth$device_index)\"",
          "    ",
          "    if configure_os_networking \"$device_index\"; then",
          "        echo \"✅ Networking configured for eth$device_index\"",
          "    else",
          "        echo \"❌ Failed to configure networking for eth$device_index\"",
          "        exit 1",
          "    fi",
          "done",
          "",
          "# Create libvirt bridges for VM networking",
          "echo \"Setting up libvirt bridges for VM networking\"",
          "",
          "for ((i=1; i<=LNI_COUNT; i++)); do",
          "    device_index=$i",
          "    echo \"Creating libvirt bridge for LNI $i\"",
          "    ",
          "    if create_libvirt_bridge \"$device_index\"; then",
          "        echo \"✅ Libvirt bridge created for LNI $i\"",
          "    else",
          "        echo \"❌ Failed to create libvirt bridge for LNI $i\"",
          "        exit 1",
          "    fi",
          "done",
          "",
          "# Set first LNI as default for VMs",
          "if set_default_libvirt_network; then",
          "    echo \"✅ Default VM network configured\"",
          "else",
          "    echo \"❌ Failed to configure default VM network\"",
          "    exit 1",
          "fi",
          "",
          "# Configure SSH and HTTP access on first LNI",
          "echo \"Configuring SSH and HTTP access on first LNI\"",
          "",
          "# Enable SSH on all interfaces",
          "systemctl reload sshd",
          "",
          "# Ensure cockpit listens on all interfaces",
          "systemctl restart cockpit.socket",
          "",
          "echo \"✅ SSH and HTTP access configured\"",
          "",
          "# Summary",
          "echo \"\"",
          "echo '=== LNI CONFIGURATION COMPLETE ==='",
          "echo \"Configured $LNI_COUNT LNI(s)\"",
          "echo \"Default VM network: br-lni1\"",
          "echo \"SSH/HTTP access: Available on all interfaces\"",
          "echo \"Completion time: $(date)\"",
          "",
          "# Create completion marker",
          "touch /tmp/lni-config-complete",
          "",
          "echo 'LNI configuration phase completed successfully'"
        ]
      }
    }
  ]
}